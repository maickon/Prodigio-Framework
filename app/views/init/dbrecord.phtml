<h1>Dbrecord</h1>
	
	<p>A classe Dbrecord é uma classe abstrata que fornece métodos especiais para a classe que se estende a ela. A classe de modelo (model) se estende a classe Dbrecord_Core. ,</p>
	Ex:
	<code>Class Testes extends Dbrecord_Core { ...</code> 
	<p>Entre os métodos disponíveis temos:</p>

    
    <h1>__select</h1>
    <p>Transforma referencias de chave estrangeira em objetos</p> 
    <code>string:$table</code><br>
    <code>string:$colums</code><br>
    <code>string:$where</code>

    <br>
    <br>

    Ex:<br>
    <code>__select('turmas','nome, fk_professores','id=1');</code> 
    <p>
    vai retornar um objeto turmas com uma propriedade chamada professores contendo todos os professores relacionados a esta turma em objeto.
    </p>
    <p>
    Este metodo filtra colunas que referenciam varios ids.<br>
    Ex: select('produtos', 'nome, fk_categorias','id=1') -> selecione todos os nomes e categorias do produto de id 1
    supondo que a coluna fk_categorias tenha os valores 1,2,3 que referencia ao id das categorias 1,2,3. Este select
    vai trazer 3 objetos categorias que foram referenciados no produto.
    </p>


    /*
    <h1>__selectOrder</h1>
    <p>Ordena os dados de uma instrucao select</p>
	<code>
    string:$table<br>
    string:$order - Definir a ordenacao por uma coluna escolhida.<br>
    ex coluna nome (os dados vem ordenados pelo nome)<br>
    string:$columns - Quais campos exibir. ex nome,id<br>
    string:$where - Uma condicao WHERE. ex id = 2<br>
	</code>
    <p>
    Ex:<br>
    <code>
    $users = $base->selectOrder('usuarios','id desc');<br>
    //ordena pelo id de forma decrescente<br>
    $users = $base->selectOrder('usuarios','nome desc', 'nome');<br>
    //ordena pelo nome e so exibe nomes<br>
    $users = $base->selectOrder('usuarios','id asc', 'nome,idade,peso','nome=\'joel\'');<br> 
    //ordena pelo id de forma ascendente, exibe apenas o nome, idade e peso apenas de 
    //registros com o nome igual a joel
    </code>
    </p>

    <h1>__insert</h1>
    <p>
    <code>
    string:$table<br>
    array/object:$fields<br>
    ex:(Object)<br>
    $obj = new StdClass;<br>
    $obj->name = 'Rick'; $obj->email = 'rick@mail.com';<br>
    insert($obj);<br>
    ex:(Array)<br>
    $array = ['name'=>'Rick','email'=>'rick@mail.com'];<br>
    insert($array);<br>
    </code>
    </p>

	<h1>Save</h1>
	<p>Salva um registro no banco de dados</p>
	<p><code>
    params:$table : O nome da tabela e opcional
    Ele verifica os campos vindo de um REQUEST e compara com os atributos 
    permitidos definidos na classe de modelo.
	</code></p>
    
    <h1>update</h1>
    <p>Atualiza um registro no banco de dados. Para chamar update você precisa que seu objeto já tenha os devidos campos preenchidos </p>
    	
    <h1>Delete</h1>
    <p>Apaga um registro no banco de dados informando o id.</p>
    	
	<h1>find_by + coluna escolhida</h1>
	<p>Este find_by filtra uma ou mais colunas de acordo com o número de colunas que você informar na chamada do método. Ex: <code>find_by_nome('Maickon')</code> vai retornar todas as linhas da tabela que contenham o nome 'Maickon'. Além disso este método aceita mais de um nome em sua declaração. Ex: <code>find_by_nome_and_idade('Maickon')</code>. Vai retornar o nome e a idade de todas as linhas que tenham o nome 'Maickon'. </p>
    <p>Na declaração do método o primeiro nome informado sempre será o campo a ser usado para fazer o filtro. Dessa forma caso o nome do método fosse <code>find_by_idade_and_nome(21)</code>, retornaria os resultados com base na idade igual a 21. </p>

    <h1>find</h1>
    <p>
    Se passado apenas o id retorna todos os campos do id encontrado. Se desejar filtra por outra coluna, basta passar a condição conditions como parametro. <br>
    <code>Ex: find(['conditions'=>'nome=\'Maickon\''])</code>
    </p>

    <h1>find_like_by</h1>
    <p>Seleciona um campo escolhido com a cláusula LIKE. Ex: <code>find_like_by_nome('ma');</code> é o mesmo que <code>select nome like '%ma%'</code> </p>
    <p>É muito semelhante ao find_by + nome.</p>

    <h1>find_all</h1>
    <p>Seleciona todos os registros da tabela. </p>
    
    <h1>find_all_asc</h1>
    <p>Seleciona todos os registros da tabela de forma ascendente.</p>
    
    <h1>find_all_desc</h1>
    <p>Seleciona todos os registros da tabela de forma descendente.</p>

    <h1>find_last</h1>
    <p>Seleciona o ultimo registro</p>

    <h1>find_first</h1>
    <p>Seleciona o primeiro registro</p>
    
    <h1>find_duplicate_by + nome da coluna</h1>
    <p>verifica se a coluna nome possui um nome duplicado atraves do parametro passado. Ex: <code>find_duplicate_by_nome()</code></p>
    <p>O uso deste método poderia ser com qualquer campo da tabela escolhida. Basta substituir o nome pelo nome de outra coluna da tabela.</p>

    <h1>find_filter</h1>
    <p>Você seleciona os campos a serem filtrados e define o where. Ex: <code>find_filter('nome','id=2')</code> [me dê o nome de quem tem id 2], <code> find_filter('id=1') [me dê todos os campos do registro de id 1]</code></p>
    <p>Se você passar apenas um parâmetro para o find_filter ele assume que você deseja retornar todos os campos da tabela.</p>

    <h1>find_by_sql</h1>
    <p>Aceita um parametro como string que é a própria instrução direta sql.</p>